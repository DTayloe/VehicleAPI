openapi: 3.0.0
info:
  title: VehicleAPI
  version: '1.0'
  contact:
    email: diomoidtron@gmail.com
    name: Daniel
    url: 'https://github.com/DTayloe/VehicleAPI'
  description: This is a coding challenge to create a vehicle sales inventory API.
servers:
  - url: 'http://localhost'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /api/vehicles:
    get:
      summary: index
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-vehicles
      description: Returns paginated view of all vehicles in database.
    post:
      summary: store
      tags: []
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  validation failed:
                    type: object
                    properties:
                      make:
                        type: array
                        items:
                          type: object
                      model:
                        type: array
                        items:
                          type: object
                      year:
                        type: array
                        items:
                          type: object
                      color:
                        type: array
                        items:
                          type: object
                      price:
                        type: array
                        items:
                          type: object
                      mileage:
                        type: array
                        items:
                          type: object
                      options:
                        type: array
                        items:
                          type: object
                required:
                  - validation failed
      operationId: post-vehicles
      description: Store a newly created vehicle in storage.
    parameters: []
  '/api/vehicles/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: show
      tags: []
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  error:
                    type: string
                    minLength: 1
                required:
                  - error
      operationId: get-api-vehicles-id
      description: Display the specified vehicle.
    put:
      summary: update
      operationId: put-api-vehicles-id
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          headers: {}
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  validation failed:
                    type: object
                    properties:
                      make:
                        type: array
                        items:
                          type: object
                      model:
                        type: array
                        items:
                          type: object
                      year:
                        type: array
                        items:
                          type: object
                      color:
                        type: array
                        items:
                          type: object
                      price:
                        type: array
                        items:
                          type: object
                      mileage:
                        type: array
                        items:
                          type: object
                      options:
                        type: array
                        items:
                          type: object
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  error:
                    type: string
                    minLength: 1
                required:
                  - error
      description: Update the specified vehicle in storage.
    delete:
      summary: destroy
      operationId: delete-api-vehicles-id
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  error:
                    type: string
                    minLength: 1
                required:
                  - error
      description: Remove the specified vehicle from storage.
  '/api/vehicles/search/make/{make}':
    parameters:
      - schema:
          type: string
        name: make
        in: path
        required: true
    get:
      summary: searchMake
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-api-vehicles-search-make-make
      description: Search all vehicles for a make containing search target
  '/api/vehicles/search/model/{model}':
    parameters:
      - schema:
          type: string
        name: model
        in: path
        required: true
    get:
      summary: searchModel
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-api-vehicles-search-model-model
      description: Search all vehicles for a model containing search target
  '/api/vehicles/search/year/{year}':
    parameters:
      - schema:
          type: string
        name: year
        in: path
        required: true
    get:
      summary: searchYear
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-api-vehicles-search-year-year
      description: Search all vehicles for a year containing search target
  '/api/vehicles/search/color/{color}':
    parameters:
      - schema:
          type: string
        name: color
        in: path
        required: true
    get:
      summary: searchColor
      tags: []
      responses:
        '200':
          description: OK
      operationId: get-api-vehicles-search-color-color
      description: Search all vehicles for a color containing search target
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    Vehicle:
      title: Vehicle
      type: object
      description: ''
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        make:
          type: string
          maxLength: 50
        model:
          type: string
          maxLength: 50
        year:
          type: integer
          format: int32
        color:
          type: string
          maxLength: 50
        price:
          type: number
          maximum: 2000000000
        mileage:
          type: integer
          maximum: 2000000000
        options:
          type: object
      required:
        - id
        - make
        - model
        - year
        - color
        - price
        - mileage
  securitySchemes: {}
  responses: {}
